##  prerequisite
 1. Docker must be install 
 
# 🗒️ Supabase Notes Service

A minimal backend for storing personal notes using Supabase and Edge Functions.

---

## 🛠️ Setup & Deployment

1. Create a Supabase project at [https://supabase.com](https://supabase.com)
2. Enable Edge Functions via CLI:

```bash
npm install -g supabase (if its did not work  go with ) ->  scoop install supabase
supabase --version
supabase login
supabase init
```
## Create the notes table:

```bash
supabase db push
```
##  Deploy Edge Functions:

```bash
supabase functions deploy post_notes
supabase functions deploy get_notes
```
 ## 📐 Why These Design Choices?
 1. id is a UUID for global uniqueness across clients.

 2. user_id ties each note to a Supabase-authenticated user via foreign key.

 3. created_at uses a server timestamp to order and track notes chronologically.

 4. text type for title/content keeps schema simple and flexible.

 ## .

## 🌐 Endpoint Design Comments
 1. POST /notes – used to create new notes (reads title & content from body).

 2. GET /notes – used to retrieve all notes for the logged-in user (no body).

 # 📦 Demo with curl
  ## ➕ Create a Note
    ```bash
     curl -X POST https://<project-ref>.functions.supabase.co/post_notes \
     -H "Authorization: Bearer YOUR_JWT_TOKEN" \
     -H "Content-Type: application/json" \
     -d '{"title": "Shopping List", "content": "Milk, Bread, Eggs"}'
    ```
## Response:

       ```bash
      {
          "id": "c1de...",
           "user_id": "abc123...",
           "title": "Shopping List",
           "content": "Milk, Bread, Eggs",
           "created_at": "2025-05-03T12:00:00Z"
             }
   ```
 ## 📄 Get Notes 


       ```bash
      curl -X GET https://<project-ref>.functions.supabase.co/get_notes \
       -H "Authorization: Bearer YOUR_JWT_TOKEN"
```
 ## Response:

       ```bash
     [
  {
    "id": "c1de...",
    "user_id": "abc123...",
    "title": "Shopping List",
    "content": "Milk, Bread, Eggs",
    "created_at": "2025-05-03T12:00:00Z"
  }
]

   ```
